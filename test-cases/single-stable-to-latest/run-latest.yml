---
# vim:ft=ansible:
- name: Set package manager first
  hosts:
    - "tag_Name_{{automation_name}}_{{tested_version|replace('.','_')}}_{{automation_os}}_single_stable_to_latest"
  roles:
    - set-package-manager

- name: Checkout and setup automation for latest pulp
  hosts:
    - "tag_Name_{{automation_name}}_automation_runner"
  tasks:
    - name: remove previous automation
      file: path={{automation_dir}}-single-stable-to-latest-latest-{{tested_version}}-{{automation_os}} state=absent
    - name: checkout automation repositories
      git: "repo=https://github.com/RedHatQE/pulp-automation dest={{automation_dir}}-single-stable-to-latest-latest-{{tested_version}}-{{automation_os}} force=yes"

- name: Configure inventory
  hosts:
    - "tag_Name_{{automation_name}}_automation_runner"
  roles:
    - {role: single-inventory-config, path: "single-stable-to-latest-latest-{{tested_version}}-{{automation_os}}", producer_node: single_stable_to_latest, consumer_node: single_stable_to_latest}
    - {role: pulp-run-setup, path: "single-stable-to-latest-latest-{{tested_version}}-{{automation_os}}"}

- name: Update pulp
  hosts:
    - "tag_Name_{{automation_name}}_{{tested_version|replace('.','_')}}_{{automation_os}}_single_stable_to_latest"
  pre_tasks:
    - name: remove previous repo file
      file: path=/etc/yum.repos.d/fedora-pulp.repo state=absent
      when: "ansible_distribution=='Fedora'"
    - name: remove previous repo file
      file: path=/etc/yum.repos.d/rhel-pulp.repo state=absent
      when: "ansible_distribution=='RedHat'"
  roles:
    - { role: testing-repos-setup, my_tested_version: "{{tested_version}}", my_tested_branch: "{{tested_branch}}"}
  post_tasks:
    - name: update all packages
      action: "{{package_manager}} name=* state=latest"
    - name: temporarily disable SE linux on feodra 22
      selinux: policy=targeted state=permissive
      when: "ansible_distribution=='Fedora' and ansible_distribution_version|int==22"
   
- name: Cleanup pulp
  hosts:
    - "tag_Name_{{automation_name}}_{{tested_version|replace('.','_')}}_{{automation_os}}_single_stable_to_latest"
  roles:
    - cleanup-pulp

- name: Run automation from automation runner
  hosts:
    - "tag_Name_{{automation_name}}_automation_runner"
  tasks:
    - name: copy certificate file to automation runner
      command: "scp -o StrictHostKeyChecking=no -i /root/.ssh/test_rsa root@{{hostvars[groups['tag_Name_'+automation_name+'_'+tested_version|replace('.','_')+'_'+automation_os+'_single_stable_to_latest'][0]]['ec2_public_dns_name']}}{{':'}}/etc/pki/tls/certs/myca.crt {{automation_dir}}-single-stable-to-latest-latest-{{tested_version}}-{{automation_os}}/"
    - name: run all tests on single node - latest
      #command: "chdir={{automation_dir}}-single-stable-to-latest-latest-{{tested_version}}-{{automation_os}} nosetests -vs --with-xunit --xunit-testsuite-name=results-single-stable-to-latest-latest-{{tested_version}}-{{automation_os}}"
      command: "chdir={{automation_dir}}-single-stable-to-latest-latest-{{tested_version}}-{{automation_os}} nosetests --with-html"
      ignore_errors: True
      tags:
        - run_automation
    - name: fetch file with results
      fetch: "src={{automation_dir}}-single-stable-to-latest-latest-{{tested_version}}-{{automation_os}}/nosetests.html dest={{inventory_dir}}/html/{{tested_version}}-{{automation_os}}-single-stable-to-latest-latest.html flat=yes"
      tags:
        - run_automation
